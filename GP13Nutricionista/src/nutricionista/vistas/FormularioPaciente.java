/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package nutricionista.vistas;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import nutricionista.accesoDatos.DietaData;
import nutricionista.accesoDatos.PacienteData;
import nutricionista.entidades.Dieta;
import nutricionista.entidades.Paciente;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;

import javax.swing.*;
import java.io.File;

/**
 *
 * @author Hernan
 */
public class FormularioPaciente extends javax.swing.JInternalFrame {

    List<Paciente> pacientes = new ArrayList();
    PacienteData pacienteData;
    DietaData dietaData;
    String[] columnas = {"Número de Paciente", "Nombre Completo", "Edad", "Altura", "Peso Actual", "Peso Buscado"};

    /**
     * Creates new form NewJInternalFrame
     */
    public FormularioPaciente() {
        initComponents();
        pacienteData = new PacienteData();
        List<Paciente> pacientesList = pacienteData.listarPacientes();
        pacientes = pacientesList;
        tablaPacientes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        dietaData = new DietaData();
        String[] columnas = {"Número de Paciente", "Nombre Completo", "Edad", "Altura", "Peso Actual", "Peso Buscado"};
        DefaultTableModel modelo = new DefaultTableModel(columnas, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

        for (Paciente paciente : pacientesList) {
            Object[] fila = {
                paciente.getIdPaciente(),
                paciente.getNombreCompleto(),
                paciente.getEdad(),
                paciente.getAltura(),
                paciente.getPesoActual(),
                paciente.getPesoBuscado()
            };
            modelo.addRow(fila);
        }
        tablaPacientes.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        nombreText = new javax.swing.JTextField();
        jbBuscar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPacientes = new javax.swing.JTable();
        jbCrearPaciente = new javax.swing.JButton();
        jbModificarPaciente = new javax.swing.JButton();
        jbCrearDieta = new javax.swing.JButton();
        jbVerDieta = new javax.swing.JButton();
        jbVerDieta1 = new javax.swing.JButton();

        titulo.setFont(new java.awt.Font("Dialog", 1, 25)); // NOI18N
        titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo.setText("Pacientes");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Ingrese nombre paciente");

        jbBuscar.setText("Buscar");
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        tablaPacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaPacientes.setEditingColumn(0);
        tablaPacientes.setEditingRow(0);
        jScrollPane1.setViewportView(tablaPacientes);

        jbCrearPaciente.setText("Crear Paciente");
        jbCrearPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCrearPacienteActionPerformed(evt);
            }
        });

        jbModificarPaciente.setText("Modificar Paciente");
        jbModificarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarPacienteActionPerformed(evt);
            }
        });

        jbCrearDieta.setText("Crear Dieta");
        jbCrearDieta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCrearDietaActionPerformed(evt);
            }
        });

        jbVerDieta.setText("Ver Dieta");
        jbVerDieta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVerDietaActionPerformed(evt);
            }
        });

        jbVerDieta1.setText("Historial Dietas");
        jbVerDieta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVerDieta1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nombreText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbCrearPaciente)
                                .addGap(18, 18, 18)
                                .addComponent(jbModificarPaciente)
                                .addGap(18, 18, 18)
                                .addComponent(jbCrearDieta)
                                .addGap(18, 18, 18)
                                .addComponent(jbVerDieta)
                                .addGap(18, 18, 18)
                                .addComponent(jbVerDieta1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbSalir))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(10, 10, 10)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbCrearDieta, jbCrearPaciente, jbModificarPaciente, jbSalir, jbVerDieta, jbVerDieta1});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCrearPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbModificarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbSalir)
                    .addComponent(jbCrearDieta, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbVerDieta, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbVerDieta1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        String val = "[a-zA-ZáéíóúÁÉÍÓÚ\\s]*";
        if (nombreText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un nombre.");
        } else if (!nombreText.getText().matches(val)) {
            JOptionPane.showMessageDialog(this, "Solo pueden ingresarse letras.");
        } else {
            List<Paciente> pacientesList = pacienteData.buscarPacientesPorNombre("%" + nombreText.getText() + "%");

            DefaultTableModel modelo = new DefaultTableModel(columnas, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            for (Paciente paciente : pacientesList) {
                Object[] fila = {
                    paciente.getIdPaciente(),
                    paciente.getNombreCompleto(),
                    paciente.getEdad(),
                    paciente.getAltura(),
                    paciente.getPesoActual(),
                    paciente.getPesoBuscado()
                };
                modelo.addRow(fila);
            }
            tablaPacientes.setModel(modelo);
        }
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbCrearPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCrearPacienteActionPerformed

        CrearPaciente jframe = new CrearPaciente(this);
        jframe.setSize(523, 463);
        jframe.setLocationRelativeTo(null);
        jframe.setVisible(true);
        jframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    }//GEN-LAST:event_jbCrearPacienteActionPerformed

    private void jbModificarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarPacienteActionPerformed
        int filaSeleccionada = tablaPacientes.getSelectedRow();
        if (filaSeleccionada != -1) {
            Paciente paciente = new Paciente(
                    (int) tablaPacientes.getValueAt(filaSeleccionada, 0),
                    (String) tablaPacientes.getValueAt(filaSeleccionada, 1),
                    (int) tablaPacientes.getValueAt(filaSeleccionada, 2),
                    (double) tablaPacientes.getValueAt(filaSeleccionada, 3),
                    (double) tablaPacientes.getValueAt(filaSeleccionada, 4),
                    (double) tablaPacientes.getValueAt(filaSeleccionada, 5));

            ModificarPaciente jframe = new ModificarPaciente(paciente, this);
            jframe.setSize(500, 550);
            jframe.setLocationRelativeTo(null);
            jframe.setVisible(true);
            jframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        } else {
            JOptionPane.showMessageDialog(null, "No hay ninguna fila seleccionada, seleccione un paciente para modificar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbModificarPacienteActionPerformed

    private void jbCrearDietaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCrearDietaActionPerformed
        int filaSeleccionada = tablaPacientes.getSelectedRow();
        if (filaSeleccionada != -1) {
            Paciente paciente = new Paciente(
                    (int) tablaPacientes.getValueAt(filaSeleccionada, 0),
                    (String) tablaPacientes.getValueAt(filaSeleccionada, 1),
                    (int) tablaPacientes.getValueAt(filaSeleccionada, 2),
                    (double) tablaPacientes.getValueAt(filaSeleccionada, 3),
                    (double) tablaPacientes.getValueAt(filaSeleccionada, 4),
                    (double) tablaPacientes.getValueAt(filaSeleccionada, 5));

            // valido si existe una dieta actualmente para este paciente
            Integer flag = dietaData.validarSiExisteDietaActual(paciente.getIdPaciente());
            if (flag == 0) {
                GenerarDieta jframe = new GenerarDieta(paciente);
                jframe.setSize(1200, 887);
                jframe.setLocationRelativeTo(null);
                jframe.setVisible(true);
                jframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            } else {
                JOptionPane.showMessageDialog(null, "El paciente posee una dieta actualmente.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay ninguna fila seleccionada, seleccione un paciente para modificar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbCrearDietaActionPerformed

    private void jbVerDietaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVerDietaActionPerformed
        int filaSeleccionada = tablaPacientes.getSelectedRow();
        if (filaSeleccionada != -1) {

            // valido que posea una dieta 
            Dieta dieta = dietaData.pacientePoseeDieta((int) tablaPacientes.getValueAt(filaSeleccionada, 0));
            if (dieta != null) {
                VerDieta jframe = new VerDieta(dieta,this);
                jframe.setSize(1200, 957);
                jframe.setLocationRelativeTo(null);
                jframe.setVisible(true);
                jframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            } else {
                JOptionPane.showMessageDialog(null, "El paciente seleccionado no posee una dieta activa.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No hay ninguna fila seleccionada, seleccione un paciente para modificar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbVerDietaActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbVerDieta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVerDieta1ActionPerformed
      int filaSeleccionada = tablaPacientes.getSelectedRow();
        if (filaSeleccionada != -1) {
                String name = (String) tablaPacientes.getValueAt(filaSeleccionada, 1);
                int pacienteId = (int) tablaPacientes.getValueAt(filaSeleccionada, 0);
                HistorialDietas jframe = new HistorialDietas(name,pacienteId);
                jframe.setSize( jframe.getWidth(),  jframe.getHeight());
                jframe.setLocationRelativeTo(null);
                jframe.setVisible(true);
                jframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        } else {
            JOptionPane.showMessageDialog(null, "No hay ninguna fila seleccionada, seleccione un paciente para ver su historial.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbVerDieta1ActionPerformed

    public void agregarPacienteATabla(Paciente paciente) {
        pacientes.add(paciente);
        DefaultTableModel modelo = (DefaultTableModel) tablaPacientes.getModel();

        Object[] fila = {
            paciente.getIdPaciente(),
            paciente.getNombreCompleto(),
            paciente.getEdad(),
            paciente.getAltura(),
            paciente.getPesoActual(),
            paciente.getPesoBuscado()
        };
        modelo.addRow(fila);
    }

    public void actualizarListado() {
        List<Paciente> pacientesList = pacienteData.listarPacientes();
        pacientes = pacientesList;
        DefaultTableModel model = (DefaultTableModel) tablaPacientes.getModel();
        model.setRowCount(0);

        for (Paciente paciente1 : pacientes) {
            Object[] fila = {
                paciente1.getIdPaciente(),
                paciente1.getNombreCompleto(),
                paciente1.getEdad(),
                paciente1.getAltura(),
                paciente1.getPesoActual(),
                paciente1.getPesoBuscado()
            };
            model.addRow(fila);
        }
        tablaPacientes.setModel(model);
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbCrearDieta;
    private javax.swing.JButton jbCrearPaciente;
    private javax.swing.JButton jbModificarPaciente;
    private javax.swing.JButton jbSalir;
    private javax.swing.JButton jbVerDieta;
    private javax.swing.JButton jbVerDieta1;
    private javax.swing.JTextField nombreText;
    private javax.swing.JTable tablaPacientes;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
