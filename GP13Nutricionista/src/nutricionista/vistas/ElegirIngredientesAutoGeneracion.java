/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package nutricionista.vistas;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import nutricionista.accesoDatos.ComidaData;
import nutricionista.accesoDatos.DietaData;
import nutricionista.accesoDatos.IngredienteData;
import nutricionista.accesoDatos.MenuData;
import nutricionista.accesoDatos.RenglonData;
import nutricionista.entidades.Dieta;
import nutricionista.entidades.Ingrediente;
import nutricionista.entidades.Menu;
import nutricionista.entidades.Paciente;
import nutricionista.entidades.Renglon;

/**
 *
 * @author gouff
 */
public class ElegirIngredientesAutoGeneracion extends javax.swing.JFrame {

    /**
     * Creates new form ElegirIngredientesAutoGeneracion
     */
    List<String> dias = Arrays.asList("LUNES", "MARTES", "MIÉRCOLES", "JUEVES", "VIERNES", "SÁBADO", "DOMINGO");
    IngredienteData ingredienteData;
    Dieta dieta;
    DietaData dietaData;
    Paciente paciente;
    ComidaData comidaData;
    RenglonData renglonData;
    MenuData menuData;
    public ElegirIngredientesAutoGeneracion(Dieta dieta) {
        initComponents();
        this.dieta = dieta;
        this.ingredienteData = new IngredienteData();
        inicializarTabla();
        dietaData = new DietaData();
        comidaData = new ComidaData();
        renglonData = new RenglonData();
        menuData = new MenuData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaIngredientes = new javax.swing.JTable();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Elige hasta tres ingredientes");

        tablaIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaIngredientes);

        jLayeredPane2.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        jButton1.setText("Cancelar");

        jButton2.setText("Generar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLayeredPane3.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane3Layout = new javax.swing.GroupLayout(jLayeredPane3);
        jLayeredPane3.setLayout(jLayeredPane3Layout);
        jLayeredPane3Layout.setHorizontalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(107, 107, 107))
        );
        jLayeredPane3Layout.setVerticalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        jLayeredPane1.setLayer(jLayeredPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLayeredPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane2)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane3)
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLayeredPane2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane3))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(validoCampos()){
            Boolean canPass = false;
                int filasSeleccionadas = tablaIngredientes.getSelectedRowCount();
                if (filasSeleccionadas >= 1  && filasSeleccionadas <= 3) {
                    canPass = true;
                } else {
                    canPass = false;
                    JOptionPane.showMessageDialog(this,
                "Necesita seleccionar al menos 3 ingredientes.",
                "Seleccion Necesaria",
                JOptionPane.WARNING_MESSAGE);
                }
            if(canPass){
               List<Ingrediente> listaIngredientesSeleccionados = new ArrayList();
                int[] filasSeleccionadasIndexs = tablaIngredientes.getSelectedRows();

                for (int fila : filasSeleccionadasIndexs) {
                    int idIngrediente = Integer.parseInt(tablaIngredientes.getValueAt(fila, 0).toString());
                    String nomIngrediente = tablaIngredientes.getValueAt(fila, 1).toString();
                    Ingrediente ingrediente = new Ingrediente();
                    ingrediente.setIdIngrediente(idIngrediente);
                    ingrediente.setNomIngrediente(nomIngrediente);
                    listaIngredientesSeleccionados.add(ingrediente);
                }
               autoGenerarDieta(dieta); 
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    public void autoGenerarDieta(Dieta dieta){
        Collections.shuffle(dias);
        Random random = new Random();
        int cantidadDias = random.nextInt(5) + 3;

        List<String> diasAleatorios = dias.subList(0, cantidadDias);
        List<Renglon> renglones = renglonData.traerRenglones();

        List<Integer> menues = new ArrayList();
        Double totalCaloriasMenues = 0.00;
        for(String dia : diasAleatorios){
            Double totalCaloriasMenu = 0.00;
            Menu menu = new Menu();
            List<Renglon> renglonesList = seleccionarCincoRandomsPorTipo(renglones);
            List<Integer> renglonIds = new ArrayList();
            switch(dia.toUpperCase()){
                case "LUNES":
                    menu.setDia(dia.toUpperCase());
                    for(Renglon renglon : renglonesList){
                        totalCaloriasMenu = totalCaloriasMenu + renglon.getSubTotalCalorias();
                    }
                    totalCaloriasMenues = totalCaloriasMenues + totalCaloriasMenu;
                    menu.setCaloriasDelMenu(totalCaloriasMenu);
                    menu = menuData.cargarMenu(menu);
                    renglonIds = renglonesList.stream()
                                    .map(Renglon::getNumRenglon)
                                    .collect(Collectors.toList());
                    renglonData.cargarMenuTieneRenglon(renglonIds,menu.getIdMenu());
                    menues.add(menu.getIdMenu());
                    break;
                case "MARTES":
                    menu.setDia(dia.toUpperCase());
                    for(Renglon renglon : renglonesList){
                        totalCaloriasMenu = totalCaloriasMenu + renglon.getSubTotalCalorias();
                    }
                    totalCaloriasMenues = totalCaloriasMenues + totalCaloriasMenu;
                    menu.setCaloriasDelMenu(totalCaloriasMenu);
                    menu = menuData.cargarMenu(menu);
                    renglonIds = renglonesList.stream()
                                    .map(Renglon::getNumRenglon)
                                    .collect(Collectors.toList());
                    renglonData.cargarMenuTieneRenglon(renglonIds,menu.getIdMenu());
                    menues.add(menu.getIdMenu());
                    break;
                case "MIERCOLES":
                    menu.setDia(dia.toUpperCase());
                    for(Renglon renglon : renglonesList){
                        totalCaloriasMenu = totalCaloriasMenu + renglon.getSubTotalCalorias();
                    }
                    totalCaloriasMenues = totalCaloriasMenues + totalCaloriasMenu;
                    menu.setCaloriasDelMenu(totalCaloriasMenu);
                    menu = menuData.cargarMenu(menu);
                    renglonIds = renglonesList.stream()
                                    .map(Renglon::getNumRenglon)
                                    .collect(Collectors.toList());
                    renglonData.cargarMenuTieneRenglon(renglonIds,menu.getIdMenu());
                    menues.add(menu.getIdMenu());
                    break;
                case "JUEVES":
                    menu.setDia(dia.toUpperCase());
                    for(Renglon renglon : renglonesList){
                        totalCaloriasMenu = totalCaloriasMenu + renglon.getSubTotalCalorias();
                    }
                    totalCaloriasMenues = totalCaloriasMenues + totalCaloriasMenu;
                    menu.setCaloriasDelMenu(totalCaloriasMenu);
                    menu = menuData.cargarMenu(menu);
                    renglonIds = renglonesList.stream()
                                    .map(Renglon::getNumRenglon)
                                    .collect(Collectors.toList());
                    renglonData.cargarMenuTieneRenglon(renglonIds,menu.getIdMenu());
                    menues.add(menu.getIdMenu());
                    break;
                case "VIERNES":
                    menu.setDia(dia.toUpperCase());
                    for(Renglon renglon : renglonesList){
                        totalCaloriasMenu = totalCaloriasMenu + renglon.getSubTotalCalorias();
                    }
                    totalCaloriasMenues = totalCaloriasMenues + totalCaloriasMenu;
                    menu.setCaloriasDelMenu(totalCaloriasMenu);
                    menu = menuData.cargarMenu(menu);
                    renglonIds = renglonesList.stream()
                                    .map(Renglon::getNumRenglon)
                                    .collect(Collectors.toList());
                    renglonData.cargarMenuTieneRenglon(renglonIds,menu.getIdMenu());
                    menues.add(menu.getIdMenu());
                    break;
                case "SABADO":
                    menu.setDia(dia.toUpperCase());
                    for(Renglon renglon : renglonesList){
                        totalCaloriasMenu = totalCaloriasMenu + renglon.getSubTotalCalorias();
                    }
                    totalCaloriasMenues = totalCaloriasMenues + totalCaloriasMenu;
                    menu.setCaloriasDelMenu(totalCaloriasMenu);
                    menu = menuData.cargarMenu(menu);
                    renglonIds = renglonesList.stream()
                                    .map(Renglon::getNumRenglon)
                                    .collect(Collectors.toList());
                    renglonData.cargarMenuTieneRenglon(renglonIds,menu.getIdMenu());
                    menues.add(menu.getIdMenu());
                    break;
                case "DOMINGO":
                    menu.setDia(dia.toUpperCase());
                    for(Renglon renglon : renglonesList){
                        totalCaloriasMenu = totalCaloriasMenu + renglon.getSubTotalCalorias();
                    }
                    totalCaloriasMenues = totalCaloriasMenues + totalCaloriasMenu;
                    menu.setCaloriasDelMenu(totalCaloriasMenu);
                    menu = menuData.cargarMenu(menu);
                    renglonIds = renglonesList.stream()
                                    .map(Renglon::getNumRenglon)
                                    .collect(Collectors.toList());
                    renglonData.cargarMenuTieneRenglon(renglonIds,menu.getIdMenu());
                    menues.add(menu.getIdMenu());
                    break;
            }
        } 
        dieta.setTotalCalorias(totalCaloriasMenues);
        dieta = dietaData.cargarDieta(dieta);
        dietaData.cargarDietaTieneMenues(menues, dieta.getIdDieta());
        JOptionPane.showMessageDialog(null, "Se genero automaticamente la dieta.", "Advertencia", JOptionPane.INFORMATION_MESSAGE);
        this.setVisible(false);
    }
    
    public Boolean validoCampos(){
        Boolean flag = true;
        Boolean alreadyShow = false;
        Date now = new Date();
        if(!alreadyShow && this.dieta.getNombre().isBlank()){
            flag = false;
            JOptionPane.showMessageDialog(this,
                "Porfavor pongale un nombre a la dieta.",
                "ATENCION",
                JOptionPane.WARNING_MESSAGE);
            alreadyShow = true;
        }
        if(!alreadyShow && this.dieta.getFechaInicio() == null){
            flag = false;
            JOptionPane.showMessageDialog(this,
                "Seleccione una fecha de inicio.",
                "ATENCION",
                JOptionPane.WARNING_MESSAGE);
            alreadyShow = true;
        } else {
            if(!alreadyShow && this.dieta.getFechaInicio().after(now)){
            JOptionPane.showMessageDialog(this,
                "La fecha de inicio no puede ser mayor a hoy.",
                "ATENCION",
                JOptionPane.WARNING_MESSAGE);
            flag = false;
            alreadyShow = true;
            }
        }

        if(!alreadyShow && this.dieta.getFechaFin() == null){
            flag = false;
            JOptionPane.showMessageDialog(this,
                "Seleccione una fecha de inicio.",
                "ATENCION",
                JOptionPane.WARNING_MESSAGE);
            alreadyShow = true;
        } else {
            if(!alreadyShow && this.dieta.getFechaFin().before(now)){
            JOptionPane.showMessageDialog(this,
                "La fecha de Fin no puede ser menor a hoy.",
                "ATENCION",
                JOptionPane.WARNING_MESSAGE);
            flag = false;
            alreadyShow = true;
            }
        }
        return flag;
    }
    
    public void inicializarTabla(){
        List<Ingrediente> ingredientes = ingredienteData.listaDeIngredientes();
        String[] columnas = {"ID", "Ingrediente"};

    DefaultTableModel modelo = new DefaultTableModel(columnas, 0) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    for (Ingrediente ingrediente : ingredientes) {
        Object[] dataRow = {
            ingrediente.getIdIngrediente(),
            ingrediente.getNomIngrediente()
        };

        modelo.addRow(dataRow);
    }

    tablaIngredientes.setName("tablaIngredientes");
    tablaIngredientes.setModel(modelo);

    eliminarColumnas(tablaIngredientes);
    }

    
    private void eliminarColumnas(JTable tabla) {
    if (tabla.getColumnCount() > 4) {
        tabla.getColumnModel().getColumn(0).setMinWidth(0); 
        tabla.getColumnModel().getColumn(0).setMaxWidth(0);
        tabla.getColumnModel().getColumn(0).setWidth(0);
        tabla.getColumnModel().getColumn(0).setResizable(false);
    }
    if (tabla.getColumnCount() > 0) {
        tabla.getColumnModel().getColumn(0).setMinWidth(0);
        tabla.getColumnModel().getColumn(0).setMaxWidth(0);
        tabla.getColumnModel().getColumn(0).setWidth(0);
        tabla.getColumnModel().getColumn(0).setResizable(false);
    }
}
    public List<Renglon> seleccionarCincoRandomsPorTipo(List<Renglon> renglones) {
        Map<String, List<Renglon>> renglonesPorTipo = new HashMap<>();
        
        for (Renglon renglon : renglones) {
            String tipoComida = renglon.getComida().getTipo();
            renglonesPorTipo
                .computeIfAbsent(tipoComida, k -> new ArrayList<>())
                .add(renglon);
        }

        if (renglonesPorTipo.size() < 5) {
            throw new IllegalArgumentException("No hay suficientes tipos de comida diferentes.");
        }

        List<Renglon> seleccionados = new ArrayList<>();

        Random random = new Random();
        Set<String> tiposSeleccionados = new HashSet<>();
        
        while (seleccionados.size() < 5) {
            List<String> tipos = new ArrayList<>(renglonesPorTipo.keySet());
            String tipoElegido = tipos.get(random.nextInt(tipos.size()));
            
            if (!tiposSeleccionados.contains(tipoElegido)) {
                List<Renglon> renglonesDelTipo = renglonesPorTipo.get(tipoElegido);
                Renglon renglonSeleccionado = renglonesDelTipo.get(random.nextInt(renglonesDelTipo.size()));
                seleccionados.add(renglonSeleccionado);
                tiposSeleccionados.add(tipoElegido);
            }
        }

        return seleccionados;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaIngredientes;
    // End of variables declaration//GEN-END:variables
}
